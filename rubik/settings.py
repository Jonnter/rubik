"""
Django settings for rubik project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from django.urls import reverse_lazy
import os

# Import project config setting
try:
    from config import config as CONFIG
except ImportError:
    msg = """
    Error: No config file found.
    You can run `cp config_example.py config.py`, and edit it.
    """
    raise ImportError(msg)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = os.path.dirname(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-d*v&=v2b@9s0(g&pt1#n&+yld&&o-8ohm^lm(5@dzh2-t5lcv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'users.apps.UsersConfig',
    'rest_framework',
    'mptt',
    'captcha',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.middleware.interceptor.RabcMiddleWare',
]

ROOT_URLCONF = 'rubik.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rubik.wsgi.application'

#用户认证模块
AUTH_USER_MODEL = 'users.UserProfile'
LOGIN_REDIRECT_URL = reverse_lazy('index')
LOGIN_URL = reverse_lazy('users:login')

# URL白名单
WHITE_LIST = [
    '^/users/login/$',
    '^/users/logout/$',
    '^/$',
    '^/error_page/$',
]
# URL免认证URL，需要登录，不需要权限校验
NO_PERMISSION_LIST = ['^/$']

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.{}'.format(CONFIG.DB_ENGINE),
        'NAME': CONFIG.DB_NAME,
        'HOST': CONFIG.DB_HOST,
        'PORT': CONFIG.DB_PORT,
        'USER': CONFIG.DB_USER,
        'PASSWORD': CONFIG.DB_PASSWORD,
        'ATOMIC_REQUESTS': False,
        # 'OPTIONS': CONFIG.DB_OPTIONS,
    },
    # 'mongo': {
    #     'ENGINE': 'django_mongodb_engine',
    #     'NAME': CONFIG.MGDB_NAME,
    #     'HOST': CONFIG.MGDB_HOST,
    #     'PORT': CONFIG.MGDB_PORT,
    #     'USER': CONFIG.MGDB_USER,
    #     'PASSWORD': CONFIG.MGDB_PASSWORD,
    # }
}

# API
# https://www.django-rest-framework.org/
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_DIR = os.path.join(BASE_DIR, "static")
STATIC_ROOT = os.path.join(PROJECT_DIR,"rubik", "data", "static")


# Session
SESSION_COOKIE_AGE=60*60
SESSION_EXPIRE_AT_BROWSER_CLOSE=True
SESSION_SAVE_EVERY_REQUEST=True
# 菜单session KEY
MENU_SESSION_KEY = "menu"
# 权限session KEY
PERMISSION_SESSION_KEY = "permission"

# celery setting ：http://docs.celeryproject.org/en/latest/userguide/configuration.html#configuration

# Broker配置，作为消息中间件
# CELERY_BROKER_URL = 'redis://:%(password)s@%(host)s:%(port)s/14' % {
#     'password': CONFIG.REDIS_PASSWORD if CONFIG.REDIS_PASSWORD else '',
#     'host': CONFIG.REDIS_HOST or '127.0.0.1',
#     'port': CONFIG.REDIS_PORT or 6379,
# }
# 存储任务结果
# CELERY_RESULT_BACKEND = CELERY_BROKER_URL
# CELERY_RESULT_BACKEND = 'redis://:%(password)s@%(host)s:%(port)s/14' % {
#     'password': CONFIG.REDIS_PASSWORD if CONFIG.REDIS_PASSWORD else '',
#     'host': CONFIG.REDIS_HOST or '127.0.0.1',
#     'port': CONFIG.REDIS_PORT or 6379,
# }

CELERY_TASK_SERIALIZER = 'json'
# 结果序列化方案
CELERY_RESULT_SERIALIZER = 'json'

# 允许的内容类型/序列化的白名单
CELERY_ACCEPT_CONTENT = ['json','pickle']
# 允许结果后端的内容类型/序列化器的白名单
CELERY_RESULT_ACCEPT_CONTENT = ['json','pickle']
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_RESULT_EXPIRES = 3600
CELERY_WORKER_LOG_FORMAT = '%(asctime)s [%(module)s %(levelname)s] %(message)s'
CELERY_WORKER_TASK_LOG_FORMAT = '%(asctime)s [%(module)s %(levelname)s] %(message)s'
CELERY_WORKER_TASK_EAGER_PROPAGATES = True
CELERY_WORKER_REDIRECT_STDOUTS = True
CELERY_WORKER_REDIRECT_STDOUTS_LEVEL = "INFO"
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
# 工作进程在新工作进程替换之前可以执行的最大任务数
CELERY_WORKER_MAX_TASKS_PER_CHILD = 10

# Email config
EMAIL_HOST = CONFIG.EMAIL_HOST
EMAIL_PORT = CONFIG.EMAIL_PORT
EMAIL_HOST_USER = CONFIG.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = CONFIG.EMAIL_HOST_PASSWORD
EMAIL_USE_SSL = CONFIG.EMAIL_USE_SSL
EMAIL_SUBJECT_PREFIX = CONFIG.EMAIL_SUBJECT_PREFIX or ''
EMAIL_FROM = CONFIG.EMAIL_HOST_USER or ''

# Captcha 配置
# Captcha 默认格式
CAPTCHA_OUTPUT_FORMAT = '%(text_field)s %(hidden_field)s %(image)s'
CAPTCHA_NOISE_FUNCTIONS = (
    # 'captcha.helpers.noise_null',  # 没有样式
    # 'captcha.helpers.noise_arcs',  # 线
    'captcha.helpers.noise_dots',  # 点
)
# 图片中的文字为随机英文字母，如 mdsh
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'
# 图片中的文字为数字表达式，如 2 + 2 =
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'
# 超时(minutes)
CAPTCHA_TIMEOUT = 5
# 验证码输入框指定 TEMPLATE, 表单使用 CaptchaField 字段生效
CAPTCHA_TEXT_FIELD_TEMPLATE = "users/login1.html"
